'use strict';

var jsCommon = require('js-common');
require('protobuf-ts/protos/google/protobuf/descriptor');
require('protobuf-ts/protos/google/api/annotations');
require('case');
var mongodb = require('mongodb');
require('child_process');
var helpers = require('yargs/helpers');
var Ve = require('yargs');
var promises = require('fs/promises');
var fs = require('fs');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var Ve__default = /*#__PURE__*/_interopDefault(Ve);

var de=(s=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(s,{get:(e,t)=>(typeof require!=="undefined"?require:e)[t]}):s)(function(s){if(typeof require!=="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+s+'" is not supported')});var N=class extends jsCommon.GenericError{constructor(e,t="Error authenticating with service"){super(e??"Generic OAuth error",t);}};var v=class extends N{constructor(e){super(e??"Invalid credentials");}};var A=class{};var P=class extends A{id;issuer;expire;type;secret;metadata;constructor(e){super();this.id=e.id;this.issuer=e.issuer;this.expire=e.expire;this.type=e.type;this.secret=e.secret;this.metadata=e.metadata;}get expired(){if(this.expire===void 0)return false;return Date.now()>this.expire*1e3}toString(){return this.issuer.toString(this)}};var C=class extends P{constructor(e){super(e);}};var h=class extends P{client;scopes;refresher;refreshPromise;constructor(e){super(e);this.client=e.client;this.scopes=e.scopes;this.refresher=e.refresher;}assignToken(e){this.expire=e.expire;this.type=e.type;this.secret=e.secret;this.scopes=e.scopes;this.metadata=e.metadata;}async doRefresh(){if(!this.id)return this.assignToken(await this.issuer.refresh(this,this.refresher));await m.synchronized(this,async e=>{if(e&&e.secret!=this.secret)this.assignToken(e);else this.assignToken(await this.issuer.refresh(this,this.refresher));});}refresh(){if(!this.refresher)throw new v("No refresh token");if(!this.refreshPromise){this.refreshPromise=this.doRefresh();this.refreshPromise.finally(()=>{this.refreshPromise=void 0;});}return this.refreshPromise}revoke(){return this.issuer.revoke(this)}get meta(){return this.metadata??this.refresher?.metadata}};var R=class extends jsCommon.GenericError{constructor(e){super(e,"Database error");}};function g(s){let e={id:s.id,issuer:s.issuer.id,type:s.type,secret:s.secret,expire:s.expire,metadata:s.metadata};if(s instanceof h){e.client=s.client;e.scopes=s.scopes;e.refresher=s.refresher?.id;}return e}function Q(s){return new C({id:s.id,issuer:$.getIssuer(s.issuer),type:s.type,secret:s.secret,expire:s.expire,metadata:s.metadata})}function q(s,e){return new h({id:s.id,issuer:$.getIssuer(s.issuer),type:s.type,secret:s.secret,expire:s.expire,metadata:s.metadata,client:s.client,scopes:s.scopes,refresher:e})}var E=class{};var K=class extends E{keys=new Map;refreshTokens=new Map;accessTokens=new Map;locks=new Map;setKey(e,t){this.keys.set(e,t);}getKey(e){return this.keys.get(e)}deleteKey(e){this.keys.delete(e);}addToken(e){if(e instanceof h)this.accessTokens.set(e.id,e);else this.refreshTokens.set(e.id,e);}updateToken(e){}deleteToken(e){if(e instanceof h)this.accessTokens.delete(e.id);else this.refreshTokens.delete(e.id);}getRefreshToken(e){return this.refreshTokens.get(e)}getAccessToken(e){return this.accessTokens.get(e)}async synchronized(e,t){let r=false;let i=new mongodb.ObjectId().toHexString();let n;let o;for(let a=0;a<15;a++){n=Date.now();o=this.accessTokens.get(e.id);if(!o)break;if(o.secret!=e.secret)break;let d=this.locks.get(e.id);if(!d||d.date<=n-2e4){d={id:i,date:n};this.locks.set(e.id,d);r=true;break}await jsCommon.Promises.resolveAfter(2e3);}let c;try{await t(o);}catch(a){c=a;}if(r||!o){let a=this.locks.get(e.id);let d=a?.id==i;if(d||!a){if(d)this.locks.delete(e.id);this.accessTokens.set(e.id,e);}}if(c)throw c}listAllKeys(){return this.keys}listAllRefreshTokens(){return Array.from(this.refreshTokens.values()).map(e=>g(e))}listAllAccessTokens(){return Array.from(this.accessTokens.values()).map(e=>g(e))}};var M=class extends E{url;db;client;keys;refreshTokens;accessTokens;ready;shouldClose=false;operations=0;closeTimeout;constructor(e,t){super();this.url=e;this.db=t;this.closeTimeout=new jsCommon.Timer({initialTimeout:1e4},()=>this.destroy());}createIndex(e,t){let r=[];for(let[i,n]of jsCommon.KV.entries(t)){let o;if(typeof n=="object"){if(n.unique)o={unique:true};n=n.direction;}r.push(e.createIndex({[i]:n},o));}return Promise.all(r)}async initialize(){this.client=new mongodb.MongoClient(this.url);try{await this.client.connect();}catch(t){this.close();throw new jsCommon.UnavailableError(t)}let e=this.client.db(this.db);this.keys=e.collection("keys");this.refreshTokens=e.collection("refreshTokens");this.accessTokens=e.collection("accessTokens");try{await Promise.all([this.createIndex(this.keys,{key:{direction:1,unique:true}}),this.createIndex(this.refreshTokens,{id:{direction:1,unique:true}}),this.createIndex(this.accessTokens,{id:{direction:1,unique:true},refresher:1})]);}catch(t){this.close();throw new R(t)}this.closeTimeout.start();}close(){this.ready=void 0;this.shouldClose=false;this.closeTimeout.stop();this.client.close();}destroy(){if(this.operations)this.shouldClose=true;else this.close();}async setup(){if(!this.ready)this.ready=this.initialize();else {this.closeTimeout.start();this.shouldClose=false;}return this.ready}runDbOp(e){this.operations++;let t=this.setup().then(e).catch(r=>{throw new R(r)});t.catch(r=>{console.error(`Database operation failed: ${r.stack??r.message}`);}).finally(()=>{this.operations--;if(!this.operations&&this.shouldClose)this.close();});return t}setKey(e,t){return this.runDbOp(()=>this.keys.updateOne({key:e},{$set:{key:e,value:t}},{upsert:true}))}getKey(e){return this.runDbOp(async()=>(await this.keys.findOne({key:e}))?.value)}deleteKey(e){return this.runDbOp(()=>this.keys.deleteOne({key:e}))}addToken(e){let t=g(e);return this.runDbOp(()=>{let r=e instanceof h?this.accessTokens:this.refreshTokens;return r.insertOne(t)})}updateToken(e){let t=g(e);return this.runDbOp(()=>{let r=e instanceof h?this.accessTokens:this.refreshTokens;return r.updateOne({id:t.id},{$set:t})})}deleteToken(e){return this.runDbOp(()=>{let t=e instanceof h?this.accessTokens:this.refreshTokens;return t.deleteOne({id:e.id})})}getRefreshToken(e){return this.runDbOp(async()=>{let t=await this.refreshTokens.findOne({id:e});if(!t)return void 0;return Q(t)})}getAccessToken(e){return this.runDbOp(async()=>{let t=await this.accessTokens.findOne({id:e});if(!t)return void 0;let r;if(t.refresher)r=await this.getRefreshToken(t.refresher);return q(t,r)})}async synchronized(e,t){await this.setup();let r=false;let i=new mongodb.ObjectId;let n;let o;for(let a=0;a<15;a++){n=Date.now();try{let d=await this.accessTokens.updateOne({id:e.id,secret:e.secret,$or:[{lockDate:{$lte:n-2e4}},{lockId:null}]},{$set:{lockId:i,lockDate:n}});if(d.matchedCount){r=true;break}let p=await this.accessTokens.findOne({id:e.id});if(!p)break;o=q(p);if(o.secret!=e.secret)break;await jsCommon.Promises.resolveAfter(2e3);}catch(d){console.error(`Failed to acquire lock: ${d.stack??d.message}`);break}}let c;try{await t(o);}catch(a){c=a;}if(r||!o){let a;if(r){a={lockId:i,lockDate:n};}else {a={lockId:null,lockDate:null};}try{await this.accessTokens.updateOne({id:e.id,...a},{$set:{...g(e),lockDate:void 0,lockId:void 0}});}catch(d){console.error(`Failed to release lock: ${d.stack??d.message}`);}}if(c)throw c}listAllKeys(){return this.runDbOp(async()=>{let e=await this.keys.find().toArray();let t=new Map;for(let r of e)t.set(r.key,r.value);return t})}listAllRefreshTokens(){return this.runDbOp(()=>{return this.refreshTokens.find().toArray()})}listAllAccessTokens(){return this.runDbOp(()=>{return this.accessTokens.find().toArray()})}};var D=class extends K{config;saving;queuedSave=false;constructor(e){super();try{this.config=l.loadConfigSync(e);}catch(r){if(!(r instanceof jsCommon.NotFoundError))throw r;this.config=new l(e,{});}let t=this.config.get("keys");if(t)this.keys=jsCommon.KV.toMap(t);this.loadTokens(this.refreshTokens,true);this.loadTokens(this.accessTokens,false);}loadTokens(e,t){let r=this.config.get(t?"refreshTokens":"accessTokens");if(!r)return;for(let i of r){let n;if(i.refresher)n=this.refreshTokens.get(i.refresher);let o=t?Q(i):q(i,n);e.set(o.id,o);}}saveImpl(){let e=[],t=[];for(let[r,i]of this.refreshTokens)e.push(g(i));for(let[r,i]of this.accessTokens)t.push(g(i));this.config.set("keys",jsCommon.KV.fromMap(this.keys));this.config.set("refreshTokens",e);this.config.set("accessTokens",t);return this.config.save()}async save(){if(this.saving){this.queuedSave=true;return}do{this.queuedSave=false;this.saving=this.saveImpl();try{await this.saving;}catch(e){console.error(`Failed to save credentials: ${e.stack??e.message}`);}}while(this.queuedSave);this.saving=void 0;}setKey(e,t){super.setKey(e,t);this.save();}getKey(e){return super.getKey(e)}deleteKey(e){super.deleteKey(e);}addToken(e){super.addToken(e);this.save();}updateToken(e){super.updateToken(e);this.save();}deleteToken(e){super.deleteToken(e);this.save();}getRefreshToken(e){return super.getRefreshToken(e)}getAccessToken(e){return super.getAccessToken(e)}};var m=class{static DatabaseStorageMedium=M;static medium;constructor(){}static initialize(){if(this.medium)return;let e=l.get("mongodb/url");let t=l.get("credentials/database");if(e&&t){this.medium=new M(e,t);return}let r=l.get("credentials/file");if(r){this.medium=new D(r);return}console.warn("No database to store credentials, using memory");this.medium=new K;}static setKey(e,t){this.initialize();return this.medium.setKey(e,t)}static getKey(e){this.initialize();return this.medium.getKey(e)}static deleteKey(e){this.initialize();return this.medium.deleteKey(e)}static addToken(e){let t=(async()=>{this.initialize();if(e.id)throw new jsCommon.ExistsError("Token already added");e.id=new mongodb.ObjectId().toHexString();if(e instanceof h&&e.refresher&&!e.refresher.id)await this.addToken(e.refresher);await this.medium.addToken(e);})();t.catch(()=>{});return t}static updateToken(e){this.initialize();if(!e.id)throw new jsCommon.NotFoundError("Token not added");return this.medium.updateToken(e)}static deleteToken(e){let t=(async()=>{this.initialize();if(!e.id)throw new jsCommon.NotFoundError("Token not added");await this.medium.deleteToken(e);e.id=void 0;})();return t}static async getRefreshToken(e){this.initialize();let t=await this.medium.getRefreshToken(e);if(!t)throw new jsCommon.NotFoundError(`Refresh token with id '${e}' not found`);return t}static async getAccessToken(e){this.initialize();let t=await this.medium.getAccessToken(e);if(!t)throw new jsCommon.NotFoundError(`Access token with id '${e}' not found`);return t}static synchronized(e,t){if(!e.id)throw new jsCommon.NotFoundError("Token not added");this.initialize();return this.medium.synchronized(e,t)}};var z=class{issuers;clients;constructor(){this.issuers=new Map;this.clients=new Map;}registerIssuers(e){for(let t of e){let r=t.implementation;let i=new r(t.name,t.id);this.issuers.set(i.id,i);}}registerClients(e){for(let t of e)this.clients.set(t.id,t);}getIssuer(e){let t=this.issuers.get(e);if(!t)throw new jsCommon.NotFoundError(`Issuer '${e}' not found`);return t}getClient(e){let t=this.clients.get(e);if(!t)throw new jsCommon.NotFoundError(`Client '${e}' not found`);return t}};var $=new z;de("electron");({request:jsCommon.HttpContentType.OCTET_STREAM,response:jsCommon.HttpContentType.OCTET_STREAM,encode:s=>s,decode:s=>s});({request:jsCommon.HttpContentType.JSON,response:jsCommon.HttpContentType.JSON,encode:s=>jsCommon.Json.encode(s),decode:s=>jsCommon.Json.decode(s)});({request:jsCommon.HttpContentType.URLFORM,response:jsCommon.HttpContentType.URLFORM,encode:s=>jsCommon.URLParams.toString(s),decode:s=>jsCommon.URLParams.toKV(s.toString())});var l=class s{static config;path;data;constructor(e,t){this.path=e;this.data=t;}static async read(e){let t;try{t=await promises.readFile(e,"utf8");}catch(r){if(r.code=="ENOENT")throw new jsCommon.NotFoundError(`File not found: ${e}`);throw r}return jsCommon.Yaml.decode(t)}static readSync(e){let t;try{t=fs.readFileSync(e,"utf8");}catch(r){if(r.code=="ENOENT")throw new jsCommon.NotFoundError(`File not found: ${e}`);throw r}return jsCommon.Yaml.decode(t)}static async write(e,t){await promises.writeFile(e,t===void 0?"":jsCommon.Yaml.encode(t));}static async loadConfig(e){return new s(e,await this.read(e))}static loadConfigSync(e){return new s(e,this.readSync(e))}static use(e){this.config=this.loadConfigSync(e??"mosaic_config.yaml");}static get(e){if(!this.config)this.use();return this.config?.get(e)}get(e){let t=this.data;let r=e.split("/");while(r.length){if(t===void 0)return void 0;if(typeof t!="object"||t===null)throw new jsCommon.ParseError(`Could not read config '${e}'`);t=t[r.shift()];}return t}set(e,t){let r=this.data;let i=e.split("/");if(r===void 0||r===null)this.data=r={};while(i.length>1){let n=i.shift();if(r[n]===void 0||r[n]===null){r=r[n]={};continue}if(typeof r[n]!="object")throw new jsCommon.ParseError(`Could not set config '${e}'`);r=r[n];}r[i.shift()]=t;}save(){return s.write(this.path,this.data)}};(async function(){let s=Ve__default.default(helpers.hideBin(process.argv)).parseSync();let e=s._.join(" ")||"credentials.yaml";l.use(s.config);let t=l.loadConfigSync(e);let r=l.get("mongodb/url"),i=l.get("credentials/database");if(!r||!i)throw new jsCommon.InvalidArgumentError("No db to import to. Please set the mongodb/url and credentials/database keys in the config");let n=new m["DatabaseStorageMedium"](r,i);await n.setup();let o=0;for(let[a,d]of jsCommon.KV.entries(t.get("keys"))){let p=await n.keys.findOne({key:a});o++;if(p?.value==d)continue;if(p)console.warn(`Overwriting existing value for ${a}: ${p.value} -> ${d}`);await n.keys.updateOne({key:a},{$set:{key:a,value:d}},{upsert:true});}let c=0;for(let a of t.get("refreshTokens")){await n.refreshTokens.updateOne({id:a.id},{$set:a},{upsert:true});c++;}for(let a of t.get("accessTokens")){await n.accessTokens.updateOne({id:a.id},{$set:a},{upsert:true});c++;}console.log(`Imported ${o} keys and ${c} tokens`);n.destroy();})();
